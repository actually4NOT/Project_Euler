# Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million,
# find the sum of the even-valued terms.
import time


def fibonacci(n):
    if n in (1, 2):
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)


def problem():
    sequence = []
    m = 2
    while True:
        if fibonacci(m) > 4000000:
            break
        else:
            sequence.append(fibonacci(m))
            m += 1
    answer = sum([n for n in sequence if n % 2 == 0])
    return answer


start_time = time.time()
print('answer is ', problem())
print(f"------ {time.time() - start_time} seconds ------")


# P.s. usings lists like list[-1] + list[-2] working faster
# Instagram, ProjectEuler.net: ilya._romanovich
# Telegram: @kizilov_elijah

# Another way to solve the problem...

def fibonacci_list():
    fb = [1, 2]
    while fb[-1] < 4000000:
        fb.append(fb[-1] + fb[-2])

    return fb


def solution(fb=fibonacci_list()):
    answer = sum([n for n in fb if n % 2 == 0])
    return answer


start_time = time.time()
print('answer is ', solution())
print(f"------ {time.time() - start_time} seconds ------")
